<?php

namespace App\Repository;

use App\Entity\Receipt;
use MiPago\Bundle\Entity\Payment;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReceiptRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * 
     * @param Receipt $receipt
     * @param type $payment_status
     * @return Array
     */
    public function findReceiptByExample (Receipt $receipt, $payment_status = null ) {
	$criteria = $this->__remove_blank_filters($receipt->toArray());
	if ( $payment_status === null ) {
	    return $this->findBy($criteria);
	} else {
	    $qb = $this->createQueryBuilder('r')
		    ->select()
		    ->leftJoin('MiPagoBundle:Payment', 'p', 'WITH', 'r.payment = p.id' );
	    $qb->andWhere('p.status = :status')
	    ->setParameter('status', $payment_status);
	    return $qb->getQuery()->getResult();
	}
    }
    public function findReceiptByNumeroReferenciaGTWIN ($numeroReferenciaGTWIN, $payment_status = null ) {
	$criteria = [
	    'numeroReferenciaGTWIN' => $numeroReferenciaGTWIN,
	];
	if ( $payment_status === null ) {
	    return $this->findBy($criteria);
	} else {
	    $qb = $this->createQueryBuilder('r')
		    ->select()
		    ->leftJoin('MiPagoBundle:Payment', 'p', 'WITH', 'r.payment = p.id' );
	    $qb->andWhere('p.status = :status')
	    ->andWhere('r.numeroReferenciaGTWIN = :numeroReferenciaGTWIN')
	    ->setParameter('status', $payment_status)
	    ->setParameter('numeroReferenciaGTWIN', $numeroReferenciaGTWIN);
	    return $qb->getQuery()->getResult();
	}
    }

    
    private function __remove_blank_filters ($criteria) {
	$new_criteria = [];
	foreach ($criteria as $key => $value) {
	    if (!empty($value))
		$new_criteria[$key] = $value;
	}
	return $new_criteria;
    }

}
