<?php

namespace MiPago\Bundle\Repository;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends \Doctrine\ORM\EntityRepository
{
    private function __remove_blank_filters ($criteria) {
	$new_criteria = [];
	foreach ($criteria as $key => $value) {
	    if (!empty($value))
		$new_criteria[$key] = $value;
	}
	return $new_criteria;
    }

    public function findByQB(array $criteriaAnd, $criteriaLike = null, array $orderBy = null, $limit = null, $offset = null)
    {
	$qb = $this->createQueryBuilder('p');
	$from = (array_key_exists('date_from', $criteriaAnd)) ? $criteriaAnd['date_from'] : null;
	$criteriaAnd['date_from'] = null;
	$to = (array_key_exists('date_to', $criteriaAnd)) ? $criteriaAnd['date_to'] : null;
	$criteriaAnd['date_to'] = null;
	$criteriaAnd = $this->__remove_blank_filters($criteriaAnd);
	if ($from !== null) {
	    $qb->andWhere('p.timestamp >= :from')
		->setParameter('from', $from);
	}
	if ($to !== null) {
	    $qb->andWhere('p.timestamp <= :to')
	    ->setParameter('to', $to);
	}
	if ( $criteriaAnd ) {
            foreach ( $criteriaAnd as $field => $value ) {
                $qb->andWhere('p.'.$field.' = :'.$field)
                    ->setParameter($field, $value);
            }
        }
	if ( $criteriaLike ) {
            foreach ( $criteriaLike as $field => $filtroa ) {
                $qb->andWhere('p.'.$field.' LIKE :'.$field)
                    ->setParameter($field, '%'.$value.'%');
            }
        }
//	$qb->orderBy($orderBy[0], $orderBy[1]);
//	dump($qb,$criteriaAnd);die;
        return $qb;
    }

    public function findPaymentsBy(array $criteria, array $orderBy = null, $limit = null, $offset = null) {
	$criteriaLikeKeys = ['kalea' => null];
	$criteriaLike = $criteriaAnd = null;
	if ( $criteria !== null ) {
	    $criteriaLike = array_intersect_key($criteria,$criteriaLikeKeys);
	    $criteriaAnd = array_diff_key($criteria,$criteriaLikeKeys);
	}
        $qb = $this->findByQB($criteriaAnd, $criteriaLike, $orderBy = null, $limit = null, $offset = null);
	$query = $qb->getQuery();
	$result = $query->getResult();
	return $result;
    }

}
